# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'info-grabber.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import re
import sys
import docx2txt
import pandas as pd
from docx2python import docx2python
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication,  QFileDialog


class Ui_MainWindow(QtWidgets.QMainWindow):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(606, 207)
        MainWindow.setMinimumSize(QtCore.QSize(606, 207))
        MainWindow.setMaximumSize(QtCore.QSize(606, 207))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_1 = QtWidgets.QLabel(self.centralwidget)
        self.label_1.setMinimumSize(QtCore.QSize(500, 30))
        self.label_1.setMaximumSize(QtCore.QSize(500, 30))
        self.label_1.setObjectName("label_1")
        self.verticalLayout.addWidget(self.label_1)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setMinimumSize(QtCore.QSize(450, 30))
        self.comboBox.setMaximumSize(QtCore.QSize(450, 30))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.horizontalLayout_2.addWidget(self.comboBox)
        self.submit_action_btn = QtWidgets.QPushButton(self.centralwidget)
        self.submit_action_btn.setMinimumSize(QtCore.QSize(130, 30))
        self.submit_action_btn.setMaximumSize(QtCore.QSize(130, 30))
        self.submit_action_btn.setObjectName("submit_action_btn")
        self.horizontalLayout_2.addWidget(self.submit_action_btn)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setEnabled(True)
        self.label_2.setMinimumSize(QtCore.QSize(500, 30))
        self.label_2.setMaximumSize(QtCore.QSize(500, 30))
        self.label_2.setObjectName("label_2")
        self.verticalLayout.addWidget(self.label_2)
        self.select_file_btn = QtWidgets.QPushButton(self.centralwidget)
        self.select_file_btn.setObjectName("select_file_btn")
        self.verticalLayout.addWidget(self.select_file_btn)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.change_file_name = QtWidgets.QLineEdit(self.centralwidget)
        self.change_file_name.setMinimumSize(QtCore.QSize(450, 30))
        self.change_file_name.setMaximumSize(QtCore.QSize(450, 30))
        self.change_file_name.setObjectName("change_file_name")
        self.horizontalLayout.addWidget(self.change_file_name)
        self.submit_name_btn = QtWidgets.QPushButton(self.centralwidget)
        self.submit_name_btn.setMinimumSize(QtCore.QSize(130, 30))
        self.submit_name_btn.setMaximumSize(QtCore.QSize(130, 30))
        self.submit_name_btn.setObjectName("submit_name_btn")
        self.horizontalLayout.addWidget(self.submit_name_btn)
        self.verticalLayout.addLayout(self.horizontalLayout)
        MainWindow.setCentralWidget(self.centralwidget)

        self.submit_action_btn.clicked.connect(self.submit_action_pressed)
        self.select_file_btn.clicked.connect(self.select_files_pressed)
        self.submit_name_btn.clicked.connect(self.submit_name_pressed)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Info-Grabber"))
        self.label_1.setText(_translate("MainWindow", "Choose Action:"))
        self.comboBox.setItemText(0, _translate("MainWindow", "Image Extraction"))
        self.comboBox.setItemText(1, _translate("MainWindow", "Report Data Extraction"))
        self.comboBox.setItemText(2, _translate("MainWindow", "Building Data Extraction"))
        self.submit_action_btn.setText(_translate("MainWindow", "Submit Action"))
        self.label_2.setText(_translate("MainWindow", "Change File Name:"))
        self.select_file_btn.setText(_translate("MainWindow", "Select File(s)"))
        self.change_file_name.setText(_translate("MainWindow", "Enter New File Name Here"))
        self.submit_name_btn.setText(_translate("MainWindow", "Submit Name"))

    def submit_action_pressed(self):
        index = self.comboBox.currentIndex()
        if index == 0:
            desktop_path = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Downloads')
            download_path = desktop_path + "\Extracted_Images"
            os.chdir(desktop_path)
           
            if os.path.exists(download_path) == True:
                print("Folder 'Extracted_Images' already exist.")
            else:
                new_imagery_directory = os.mkdir('Extracted_Images')
                print('A folder named "Extracted_Images" has been created.')
            
            imagery_directory = desktop_path + "Extracted_Images" 

            filetypes = (('Docx files', '*docx'))
            selected_files = QFileDialog.getOpenFileNames(self, 'Open file' '', "Docx files(*.docx)", options=QFileDialog.DontUseNativeDialog)

            count = 1

            for file in selected_files:
                os.chdir(download_path) 
                new_folders = os.mkdir(f'File {count} Images')
                extracted_images = docx2txt.process(file, imagery_directory + '\'' + f'File {count} Images')
                count += 1


            print("fizz")
           

        if index == 1:
            
            print("buzz")

        if index == 2:
            selected_files = QFileDialog.getOpenFileNames(self, 'Open file' '', "Docx files(*.docx)", options=QFileDialog.DontUseNativeDialog)

            first_time = True # Make sure varibale is not declared more than once
            for file in selected_files:
                file_contents = docx2txt.process(file)
                formatted_filecontents = file_contents.replace("\n"," ") #Turns docx file into formatted text

                company_name = re.findall("(?<=Company Name\s\s)(.*)(?=Property Manager)|(?<=Company)(.*)(?=Contact Name)|(?<=Company:)(.*)(?=PREPARED BY:)",formatted_filecontents)
                property_manager = re.findall("(?<=Property Manager\s\s)(.*)(?=Building Address)|(?<=Contact Name)(.*)(?=Building Name)|(?<=Contact:)(.*)(?=Building Name:)|(?<= Property Manager)(.*)(?=Address)",formatted_filecontents)
                building_address = re.findall("(?<=Building Address\s\s)(.*)(?=City)|(?<= Building Address:)(.*)(?=,)|(?<=Building Address)(.*)(?=Roof Type:)|(?<=Building Address)(.*)(?=Job #)",formatted_filecontents)
                file_city = re.findall("(?<=City\s\s)(.*)(?=Province)|(?<= ,)(.*)(?= Type of Roof: )",formatted_filecontents)
                file_province = re.findall("(?<=Province\s\s)(.*)(?=Job #)",formatted_filecontents)
                job_number = re.findall("(?<=Job #\s\s)(.*)(?=P.O.#)", formatted_filecontents)
                po_number = re.findall("(?<=P.O.#\s\s)(.*)(?=GENERAL INFORMATION)",formatted_filecontents)

                new_dict = {"Company Name": str(company_name).strip("[]").strip("()"),
                            "Property Manager": str(property_manager).strip("[]").strip("()"),
                            "Building Address": str(building_address).strip("[]").strip("()"),
                            "City": str(file_city).strip("[]").strip("()"),                   
                            "Province": str(file_province).strip("[]").strip("()"),
                            "Job #": str(job_number).strip("[]").strip("()"),
                            "P.O #": str(po_number).strip("[]").strip("()"),
                            }

                new_dict = {k: [v] for k, v in new_dict.items()} 
                if first_time: # Same as first_time == True
                    first_time = False
                    df2export = pd.DataFrame.from_dict(new_dict) # Makes dataframe if its the first time
                else: 
                    df2export = df2export.append(pd.DataFrame(new_dict), ignore_index = True) # Adds to the existing dataframe ()
                    df2export.dropna()
            saving_path = QFileDialog.saveFileContent(mode = 'w', defaultextension = ".csv")
            df2export.to_csv(saving_path, index = False, line_terminator='\n')
           # saving_path.close()
            print("fizzbuzz")

    def select_files_pressed(self):
        print("bob")
        fname = QFileDialog.getOpenFileNames(None, 'Open file' 'c:\\', "Docx files (*.docx)")

      

    def submit_name_pressed(self):
        print("lob")
        
  


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
